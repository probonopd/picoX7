name: Build

on:
  pull_request:
  push:
    #branches:
      #- main

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
  
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev cmake gcc-arm-none-eabi

      - name: Build non-native targets
        run: |
          mkdir build-non-native
          cd build-non-native
          cat ../CMakeLists.txt
          cmake -DCMAKE_BUILD_TYPE=Release -DPLT_TARGET=rpipico -DCMAKE_TOOLCHAIN_FILE=../Platform/MTL/rpipico/toolchain.cmake ..
          cmake --build .
          ls -l Source/*.uf2

      - name: Upload non-native artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-non-native
          path: build-non-native/Source/*.uf2

  build-native-arm:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-arm qemu-user-static debootstrap

      - name: Create rootfs
        run: |
          sudo debootstrap --arch armhf --variant minbase focal /mnt
          sudo mount -o bind /dev /mnt/dev
          sudo mount -o bind /proc /mnt/proc
          sudo mount -o bind /sys /mnt/sys
          sudo mkdir -p /mnt/repository
          sudo mount -o bind $(pwd) /mnt/repository

      - name: Build native ARM targets in QEMU
        run: |
          mkdir build-native-arm
          sudo cp $(which qemu-system-arm) /mnt/usr/bin
          sudo cp /etc/resolv.conf /mnt/etc/
          sudo chroot /mnt /bin/bash -c "apt-get -y update"
          sudo chroot /mnt /bin/bash -c "apt-get -y install build-essential libsdl2-dev cmake"
          sudo chroot /mnt /bin/bash -c "cd /repository && cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_FIND_ROOT_PATH=/mnt/repository . && make -C /repository/build-native-arm"
          sudo chroot /mnt /bin/bash -c "file /repository/build-native-arm/Source/picoX7_NATIVE"
          
      - name: Upload native ARM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-native-arm
          path: build-native-arm/Source/picoX7_NATIVE
          
      - name: Clean up rootfs
        run: |
          sudo umount /mnt/dev
          sudo umount /mnt/proc
          sudo umount /mnt/sys 
          sudo umount /mnt/repository
          # sudo rm -rf /mnt

  build-native-x86_64:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsdl2-dev
      - name: Build native x86_64 targets
        run: |
          mkdir build-native-x86_64
          cd build-native-x86_64
          cat ../CMakeLists.txt
          cmake -DCMAKE_BUILD_TYPE=Release -DPLT_TARGET=native -DCMAKE_CXX_COMPILER=g++ -DCMAKE_ASM_COMPILER=gcc -DCMAKE_PREFIX_PATH=/usr ..
          cmake --build .
      - name: Upload native x86_64 artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-native-x86_64
          path: build-native-x86_64/Source/picoX7*
